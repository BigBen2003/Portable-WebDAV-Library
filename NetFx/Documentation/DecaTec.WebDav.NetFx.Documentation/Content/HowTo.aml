<?xml version="1.0" encoding="utf-8"?>
<topic id="46ec273e-119a-4fd8-bfbf-81485f76f23f" revisionNumber="1">
  <developerConceptualDocument
      xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
      xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>This section provides some general information about the usage of the Portable WebDAV Library (NetFx).</para>
    </introduction>
    
    <section>
      <title>Using the library with expired/untrusted SSL certificates</title>
      <content>
        <para>
          The Portable WebDAV Library can also be used with WebDAV servers which use expired/untrusted certificates. This is a common scenario when using self-signed certificates, as these are not trusted.
        </para>
        <para>
          <legacyBold>Important:</legacyBold> It is up to the application/app using the Portable WebDAV Library to specify which certificate errors should be ignored. This can be accomplished by using the ServerCertificateValidationCallback of the class ServicePointManager.
        </para>
        <para>
          See the following example using a WebDavSession:
        </para>
        <code language="c#">
          <![CDATA[
// Use the ServicePointManager.ServerCertificateValidationCallback to ignore certificate errors.
// This call should be done before trying to access any WebDAV resources, otherwise an exception will be thrown.
ServicePointManager.ServerCertificateValidationCallback += (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) =>
{
    // Specify which certificate errors should be ignored.
    if (sslPolicyErrors == SslPolicyErrors.RemoteCertificateNotAvailable)
        return true;
    else
        return false;
};

// The base URL (HTTPS) of the WebDAV server.
var webDavServerUrl = "https://www.myserver.com/webdav/";

// Specify the user credentials.
var credentials = new NetworkCredential("MyUserName", "MyPassword");

// Create a WebDavSession.
var webDavSession = new WebDavSession(webDavServerUrl, credentials);

var items = await webDavSession.ListAsync(@"MyFolder/");

foreach (var item in items)
{
    // Handle the response (list of WebDavSessionListItems).
}

webDavSession.Dispose();
          ]]>
        </code>
      </content>
    </section>

    <relatedTopics>

    </relatedTopics>
  </developerConceptualDocument>
</topic>
