<?xml version="1.0" encoding="utf-8"?>
<topic id="ec2c4fb9-84b7-4cd1-a3a7-271e790c0df7" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        Portable WebDAV Library is a fully <externalLink>
          <linkText>RFC 4918</linkText>
          <linkUri>http://tools.ietf.org/html/rfc4918</linkUri>
        </externalLink> compliant WebDAV client library which is implemented as portable class library (PCL) for use on desktop environments as well as mobile devices.
      </para>
      <para>
        <legacyBold>This is the documentation for the DecaTec.WebDav.Uwp part of the Portable WebDAV Library.</legacyBold>
      </para>
    </introduction>

    <section>
      <title>Obtaining the library</title>
      <content>
        <para>
          There is a NuGet package available: Just search for '<legacyBold>PortableWebDavLibrary</legacyBold>' in the 'Manage NuGet Packages...' window in Visual Studio. You can also find the package <externalLink><linkText>here</linkText><linkUri>https://www.nuget.org/packages/PortableWebDavLibrary/</linkUri></externalLink>. 
          When using the NuGet package, you do not have to worry about which version of the library should be used (NetFx/Uwp - see below), as the correct reference is added to your project automatically.
        </para>
        <para>
          If you prefer the manual installation method, you can find the current release as ZIP file on the <externalLink><linkText>GitHub release page</linkText><linkUri>https://github.com/DecaTec/Portable-WebDAV-Library/releases</linkUri></externalLink>.
        </para>
      </content>
    </section>

    <section>
      <title>Two versions of the Portable WebDAV Library</title>
      <content>
        <para>For a better compatibility to the different target platforms, the library is split into two separate parts:</para>
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold>DecaTec.WebDav.NetFx.dll:</legacyBold> This portable class library targets .NET Framework 4.5, Windows 8, Windows Phone 8.1 and ASP.NET Core.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>DecaTec.WebDav.Uwp.dll:</legacyBold> This portable class library targets Windows 8.1 and Windows Phone 8.1.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section>
      <title>Which version should be used?</title>
      <content>
        <para>
          If you application/app runs under <legacyBold>.NET Framework</legacyBold>, <legacyBold>Windows 8</legacyBold> or <legacyBold>ASP.NET</legacyBold>, then use <legacyBold>DecaTec.WebDav.NetFx</legacyBold>: This implementation is based on the <externalLink>
            <linkText>System.Net.Http.HttpClient</linkText>
            <linkUri>https://msdn.microsoft.com/en-us/library/system.net.http.httpclient(v=vs.118).aspx</linkUri>
          </externalLink> which offers a straightforward access to web resources.
        </para>
        <para>
          When targeting <legacyBold>Windows 8.1</legacyBold>/<legacyBold>Windows Phone 8.1</legacyBold> or <legacyBold>Windows 10</legacyBold>/<legacyBold>Windows 10 Mobile</legacyBold>, especially <legacyBold>Universal Windows Platform (UWP)</legacyBold> apps, then use <legacyBold>DecaTec.WebDav.Uwp</legacyBold>: This is based on <externalLink>
            <linkText>Windows.Web.Http.HttpClient</linkText>
            <linkUri>https://msdn.microsoft.com/library/windows/apps/windows.web.http.httpclient.aspx</linkUri>
          </externalLink>, which is the more modern API for web resource access.
        </para>
      </content>
    </section>

    <section>
      <title>Why there are two versions of the library? Why not using one portable class library for all target platforms?</title>
      <content>
        <para>
          The first implementation of the Portable WebDAV Library consisted of only one DLL targeting all available target platforms. But when using the library in a UWP app, there were some compatibility issues: Not being able to ignore invalid SSL certificates or even a bug in the System.Net.Http assembly (referenced in UWP apps), which threw an exception when trying to access WebDAV resources. Due to these reasons, when implementing a UWP app, the use of <externalLink>
            <linkText>Windows.Web.Http.HttpClient</linkText>
            <linkUri>https://msdn.microsoft.com/library/windows/apps/windows.web.http.httpclient.aspx</linkUri>
          </externalLink>  is recommended by Microsoft as this API offers better flexibility and compatibility. Therefor, the Portable WebDAV Library was split into to different version.
        </para>
        <para>
          In the future, maybe the library gets merged into one (universal) library again as long as these is one API for web resource access which works the same on every target platform.
        </para>
      </content>
    </section>

    <section>
      <title>Getting Started</title>
      <content>
        <para>
          To get started, add a reference to <legacyBold>DecaTec.WebDav.Uwp.dll</legacyBold> to your project.
        </para>
        <para>
          <legacyBold>Usage</legacyBold>
        </para>
        <para>See the following code which uses a WebDavSession to retrieve the content of a folder:</para>

        <para>
          There are two levels of abstractions included in this library:
          A low level abstraction (class <legacyBold>WebDavClient</legacyBold>) which supports direct access to a WebDAV server and a higher level of abstraction
          (class <legacyBold>WebDavSession</legacyBold>) which hides most of the direct WebDAV communication and provides an easy access to WebDAV resources.
        </para>
        <para>
          <legacyBold>WebDavSession</legacyBold>
        </para>
        <para>
          The WebDavSession should be sufficient for most use cases regarding WebDAV access. It provides a high level of abstraction and hides most of the WebDAV
          specific details (like sending or receiving XML content strings) and supports an easy access to WebDAV servers.
        </para>
        <para>See the following code which uses a WebDavSession to retrieve the content of a folder:</para>
        <code language="c#">
          <![CDATA[
// The base URL of the WebDAV server.
var webDavServerUrl = "http://www.myserver.com/webdav/";

// Specify the user credentials and use it to create a WebDavSession instance.
var credentials = new PasswordCredential(webDavServerUrl, "MyUsername", "MyPassword");
var webDavSession = new WebDavSession(@"http://www.myserver.com/webdav/", credentials);
var items = await webDavSession.ListAsync(@"MyFolder/");

foreach (var item in items)
{
    // Handle the response (list of WebDavSessionListItems), e.g item.Uri is the URL of an item (folder or file).
}
          ]]>
        </code>

        <para>
          <legacyBold>WebDavClient</legacyBold>
        </para>
        <para>
          When the WebDavSession is not sufficient for specific operations, there is also a low level WebDAV access: WebDavClient. This class inherits from System.Net.Http.HttpClient
          and offers all WebDAV specific operations in the same style as the HttpClient.
          By using WebDavClient, you can use all of the WebDAV operations specified in RFC 4918. The use of WebDavClient is recommended for users who are familiar with the WebDAV specification.
        </para>
        <para>See the following code which uses a WebDavClient to retrieve the content of a folder:</para>
        <code language="c#">
          <![CDATA[
// The base URL of the WebDAV server.
var webDavServerUrl = "http://www.myserver.com/webdav/";

// Specify the user credentials and pass it to a HttpBaseProtocolFilter.
var credentials = new PasswordCredential(webDavServerUrl, "MyUserName", "MyPassword");
var httpBaseProtocolFilter = new HttpBaseProtocolFilter();
httpBaseProtocolFilter.ServerCredential = credentials;

// Use the HttpBaseProtocolFilter (with credentials) to create a new WebDavClient.
var webDavClient = new WebDavClient(httpBaseProtocolFilter);

// Create a PropFind object with represents a so called allprop request.
var pf = PropFind.CreatePropFindAllProp();
var response = await webDavClient.PropFindAsync("http://www.myserver.com/webdav/MyFolder/", WebDavDepthHeaderValue.Infinity, pf);

// You could also use an XML string directly for use with the WebDavClient.
//var xmlString = "&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&lt;D:propfind xmlns:D=\&quot;DAV:\&quot;&gt;&lt;D:allprop /&gt;&lt;/D:propfind&gt;";
//var response = await webDavClient.PropFindAsync(@"http://www.myserver.com/webdav/MyFolder/", WebDavDepthHeaderValue.Infinity, xmlString);

// Use the WebDavResponseContentParser to parse the response message and get a MultiStatus instance (this is also an async method).
var multistatus = await WebDavResponseContentParser.ParseMultistatusResponseContentAsync(response.Content);

// Now you can use the MultiStatus object to get access to the items properties.
foreach (var responseItem in multistatus.Response)
{
    // Handle propfind multistatus response, e.g responseItem.Href is the URL of an item (folder or file).
}

// Dispose the WebDavClient when it is not longer needed.
webDavClient.Dispose();
          ]]>
        </code>

        <para>
          <legacyBold>Locking</legacyBold>
        </para>
        <para>
          The Portable WebDAV Library also supports WebDAV locking.
        </para>
        <para>When using a WebDavClient, the locking has to be managed by the calling code, i.e. the handling of lock tokens etc.</para>
        <para>
          Using a WebDavSession makes WebDAV locking pretty easy, because the WebDavSession handles all the locking mechanism by itself.
          As an example: When the WebDavSession was used to lock a folder, all  subsequent operations affecting the locked file or folder, no lock specific details have to be
          provided (e.g. you do not have to specify a lock token). This is all handled internally in the WebDavSession itself.
        </para>
        <para>For example code demonstrating locking with WebDavClient or WebDavSession, see the documentation of these classes.</para>
        <para></para>
        <para>
          <legacyBold>WebDAV object model</legacyBold>
        </para>
        <para>
          Most communication regarding WebDAV is realized with XML strings sent or received in the content of requests or responses. The library contains the WebDAV object
          model implemented in classes/enums, so there is no need to build up or parse any XML strings directly. Of course you can also use XML strings directly.
        </para>
        <para>As an example: For sending a so called allprop request, you'll need an XML content in the request which looks like this:</para>
        <code language="xml">
          <![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<D:propfind xmlns:D="DAV:">
     <D:allprop />
</D:propfind>
          ]]>
        </code>
        <para>When sending such a WebDAV request, you can simply use the XML string directly:</para>
        <code language="c#">
          <![CDATA[
var xmlString = "<?xml version=\"1.0\" encoding=\"utf-8\"?>...."
          ]]>
        </code>
        <para>
          All methods which require such an XML string in the request content will accept this XML string.
        </para>
        <para>
          But you can also use the WebDAV object model classes integrated in this library:
        </para>
        <code language="c#">
          <![CDATA[
PropFind pf = PropFind.CreatePropFindAllProp();
          ]]>
        </code>
        <para>
          This will create an allprop PropFind object which can be directly passed to the corresponding method in the WebDavClient.
          Many classes of the WebDAV object model contain static methods for creating standard WebDAV request contents.
          Keep in mind that the WebDAV object model implemented in this library can only be used with the WebDavClient class. When using the WebDavSession class, there is no need to
          bother about the content of WebDAV requests/responses, thus the WebDAV object model is not needed in this case.
        </para>
        <para></para>
        <para>
          <legacyBold>Development</legacyBold>
        </para>
        <para>For development, you will need:</para>
        <list class="bullet">
          <listItem>
            <para>
              Visual Studio 2013 or later
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>Sandcastle Help File Builder</linkText>
                <linkUri>https://github.com/EWSoftware/SHFB</linkUri>
              </externalLink> (optional, for project documentation)
            </para>
          </listItem>
        </list>
        <para>
          <legacyBold>Unit tests</legacyBold>
        </para>
        <para>
          The solution contains unit tests (testing single units of the library), but also unit integration tests, which will test the library against a specific WebDAV
          server (e.g. a local IIS web server with WebDAV enabled). These unit tests are implemented as Unit Test Apps (Universal Windows).
        </para>
        <para>
          <legacyItalic>Important:</legacyItalic>
          In order to run the unit integrations tests, information about a specific WebDAV server have to be provided in a configuration file. This has to be a file named 'TestConfiguration.txt'
          located in the unit integration test project's output folder (e.g. <legacyItalic>Portable-WebDAV-Library\Uwp\UnitTests\DecaTec.WebDav.Uwp.UnitIntegrationTest\bin\x86\Release\AppX</legacyItalic>). This file has to contain exactly three lines:
        </para>
        <list class="nobullet">
          <listItem>
            <para>
              The user name
            </para>
          </listItem>
          <listItem>
            <para>
              The password
            </para>
          </listItem>
          <listItem>
            <para>
              The URL of a valid WebDAV server folder
            </para>
          </listItem>
        </list>
        <para>If this configuration file is not present, all unit integration tests will fail!</para>
      </content>
    </section>

    <relatedTopics>
      <link xlink:href="a108005d-dd4f-4258-af05-4d0d8106efd0" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>
